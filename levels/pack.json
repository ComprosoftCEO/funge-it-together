{
  "levels": [
    {
      "id": "b42f7f23-62aa-4b90-91b4-22cb5745211d",
      "name": "Add 7",
      "description": "Add 7 to every input\n\n\nConstraints:\n∙ -999 ≤ Input ≤ 992",
      "luaFile": "add-7.lua"
    },
    {
      "id": "a7799c55-c6fc-4b4e-9839-427d92e8f7fe",
      "name": "Absolute Value",
      "description": "Output the absolute value of the input\n\n\nConstraints:\n∙ -999 ≤ Input ≤ 999",
      "luaFile": "absolute-value.lua"
    },
    {
      "id": "08a396a9-fc41-4146-9e3a-7d19d968b720",
      "name": "Divide By 5",
      "description": "Divide the input by 5, rounded down.\nFor example, 23 / 5 = 4.\n\n\nConstraints:\n∙ 5 ≤ Input ≤ 100",
      "luaFile": "divide-by-5.lua"
    },
    {
      "id": "d6c44eee-46f6-416b-8756-a2970d72659e",
      "name": "Only Evens",
      "description": "Output only the even numbers\n\n\nConstraints:\n∙ -10 ≤ Input ≤ 10",
      "luaFile": "only-evens.lua"
    },
    {
      "id": "70beb32f-056c-4730-87a5-0d851d81d6d3",
      "name": "Maximum Value",
      "description": "Output the maximum value from the list.\nThe maximum is guaranteed to be unique.\n\n\nConstraints:\n∙ -99 ≤ Input ≤ 99\n∙ Unique maximum",
      "luaFile": "maximum.lua"
    },
    {
      "id": "6c6021e6-7e4c-4617-9543-3d9aa98344f7",
      "name": "Nth Fibonacci",
      "description": "Compute the nth Fibonacci number.\nRecall that the Fibonacci function is defined by:\n\n  f(0) = 0\n  f(1) = 1\n  f(n) = f(n-1) + f(n-2)\n\n\nConstraints:\n∙ 0 ≤ Input ≤ 15",
      "luaFile": "nth-fibonacci.lua"
    },
    {
      "id": "e2d916ee-c8c9-4556-a442-0f940c722aa7",
      "name": "Caesar Cipher",
      "description": "Encryption is an important part of secure data transmission.\n\nFirst, read the encryption key integer from input.\nThen, read the message and shift every letter (1-26, or A-Z) by that many characters.\nBe sure to wrap around letters outside the range 1-26.\n\nExample:\n∙ Encryption Key: -5\n∙ Input 3 (C), Output 25 (Y)\n\n\nConstraints:\n∙ -25 ≤ Encryption Key ≤ -1  (Shift backward)\n∙ 1 ≤ Encryption Key ≤ 25    (Shift forward)\n∙ 1 ≤ Test Input ≤ 26",
      "luaFile": "caesar-cipher.lua"
    },
    {
      "id": "67ac551c-3c7a-4f5f-b893-9d265aa89a43",
      "name": "Average",
      "description": "Compute the average of the input values, rounded down.\n\nExample:\n∙ average{3, 45, 19, 80} = 36\n\n\nConstraints:\n∙ 1 ≤ Input ≤ 99\n∙ 2 ≤ Number of Input Values ≤ 10",
      "luaFile": "average.lua"
    },
    {
      "id": "69e11ea2-ebcf-455f-aa0b-4b54481024b0",
      "name": "Interpreter",
      "description": "An important job of any AI is the ability to execute other programs.\nSo, you will need to write an interpreter for a subset of the stack instructions.\nYou can assume the none of the input programs will overflow the stack or cause an arithmetic error.\n\nInstructions\n∙ 1 <Value> - Push <Value> onto the stack\n∙ 2 - Pop\n∙ 3 - Swap the top two values of the stack\n∙ 4 - Add, pop off two values from the stack and push their sum\n∙ 5 - Sub, pop off two values from the stack push their difference\n∙ 6 - Output, pop a value off the stack and push to the output stream\n\n\nExample:\n∙ Input: 1 10 1 20 4 1 99 3 2 6\n∙ Steps: PUSH 10, PUSH 20, ADD, PUSH 99, SWAP, POP, OUTPUT\n∙ Output: 99\n\n\nConstraints:\n∙ All instructions are valid\n∙ -99 ≤ Input ≤ 99\n∙ Program will not cause a stack or arithmetic error",
      "luaFile": "interpreter.lua"
    },
    {
      "id": "56b6be1a-1063-4ae5-90dc-fe3e5d12f6e5",
      "name": "Longest Subsequence",
      "description": "Find the longest subsequence (or run) of equal values.\nThe subsequence is guaranteed to be unique.\nOutput the repeated number and length of the subsequence.\n\nExample:\n∙ Input: 13 13 2 99 99 99 99 60 60\n∙ Output: 99 4\n\n\nConstraints:\n∙ 1 ≤ Input ≤ 99\n∙ -99 ≤ Input ≤ 99\n∙ Subsequence will be unique",
      "luaFile": "longest-subsequence.lua"
    }
  ],
  "winMessage": "You solved all of the puzzles! Good job!"
}
