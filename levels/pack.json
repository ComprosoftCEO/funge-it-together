{
  "levels": [
    [
      {
        "id": "b42f7f23-62aa-4b90-91b4-22cb5745211d",
        "name": "Add 7",
        "description": "Add 7 to every input\n\n\nConstraints:\n∙ -999 ≤ Input ≤ 992",
        "luaFile": "add-7.lua"
      },
      {
        "id": "bccd3d32-821c-4f6e-97f7-12616e25ac7a",
        "name": "Sign",
        "description": "Output the sign of the input:\n∙ +1 if positive\n∙ -1 if negative\n∙  0 otherwise\n\n\nConstraints:\n∙ -999 ≤ Input ≤ 999",
        "luaFile": "sign.lua",
        "challengeLevels": [
          {
            "id": "a7799c55-c6fc-4b4e-9839-427d92e8f7fe",
            "name": "Absolute Value",
            "description": "Output the absolute value of the input\n\n\nConstraints:\n∙ -999 ≤ Input ≤ 999",
            "luaFile": "absolute-value.lua"
          }
        ]
      },
      {
        "id": "feb57646-7d5a-4564-930f-3040186b5897",
        "name": "Reverse",
        "description": "Reverse the order of the input items\n\n\nConstraints:\n∙ -999 ≤ Input ≤ 999",
        "luaFile": "reverse.lua"
      },
      {
        "id": "5214032e-87f1-415e-a086-15f4052d9fd4",
        "name": "Take 10",
        "description": "Take (at most) the first 10 input items.\nThe input may have fewer than 10 items.\n\n\nConstraints:\n∙ -999 ≤ Input ≤ 999\n∙ 5 ≤ Number of Inputs ≤ 15",
        "luaFile": "take-10.lua"
      }
    ],
    [
      {
        "id": "08a396a9-fc41-4146-9e3a-7d19d968b720",
        "name": "Divide By 5",
        "description": "Divide the input by 5, rounded down.\nFor example, 23 / 5 = 4.\n\n\nConstraints:\n∙ 5 ≤ Input ≤ 100",
        "luaFile": "divide-by-5.lua"
      },
      {
        "id": "32467c02-63e4-42cc-8bd0-e214fc6dd7b5",
        "name": "Trim 0's",
        "description": "Remove all 0's from the start and end of the input.\nLeave any 0's in the middle of the input (sandwiched between non-zero numbers).\n\nConstraints:\n∙ -9 ≤ Input ≤ 9",
        "luaFile": "trim.lua"
      },
      {
        "id": "d6c44eee-46f6-416b-8756-a2970d72659e",
        "name": "Only Evens",
        "description": "Output only the even numbers\n\n\nConstraints:\n∙ -10 ≤ Input ≤ 10",
        "luaFile": "only-evens.lua"
      },
      {
        "id": "70beb32f-056c-4730-87a5-0d851d81d6d3",
        "name": "Maximum Value",
        "description": "Output the maximum value from the list.\nThe maximum is guaranteed to be unique.\n\n\nConstraints:\n∙ -99 ≤ Input ≤ 99\n∙ Unique maximum",
        "luaFile": "maximum.lua"
      }
    ],
    [
      {
        "id": "e2d916ee-c8c9-4556-a442-0f940c722aa7",
        "name": "Caesar Cipher",
        "description": "Encryption is an important part of secure data transmission.\n\nFirst, read the encryption key integer from input.\nThen, read the message and shift every letter (1-26, or A-Z) by that many characters.\nBe sure to wrap around letters outside the range 1-26.\n\nExample:\n∙ Encryption Key: -5\n∙ Input 3 (C), Output 24 (X)\n\n\nConstraints:\n∙ -25 ≤ Encryption Key ≤ -1  (Shift backward)\n∙ 1 ≤ Encryption Key ≤ 25    (Shift forward)\n∙ 1 ≤ Test Input ≤ 26",
        "luaFile": "caesar-cipher.lua"
      },
      {
        "id": "e22d4ee3-0932-4686-be8b-086656accadc",
        "name": "Total Ordering",
        "description": "Read x and y from the input, then compute min{x,y} followed by max{x,y}.\nBe careful to avoid arithmetic overflow when comparing x and y.\n\n\nConstraints:\n∙ -999 ≤ x,y ≤ 999",
        "luaFile": "total-ordering.lua"
      },
      {
        "id": "67ac551c-3c7a-4f5f-b893-9d265aa89a43",
        "name": "Average",
        "description": "Compute the average of the input values, rounded down.\n\nExample:\n∙ average{3, 45, 19, 80} = 36\n\n\nConstraints:\n∙ 1 ≤ Input ≤ 99\n∙ 2 ≤ Number of Input Values ≤ 10",
        "luaFile": "average.lua"
      },
      {
        "id": "d3b36c5d-cefd-4eeb-91fa-ab59d041019c",
        "name": "Multiplication",
        "description": "Read x and y from the input, then compute x*y.\n\n\nConstraints:\n∙ -99 ≤ x ≤ 99\n∙ -10 ≤ y ≤ 10",
        "luaFile": "multiplication.lua",
        "challengeLevels": [
          {
            "id": "79017cfa-a8e1-4ef9-9fab-67146746a317",
            "name": "Factorial",
            "description": "Read x from the input and compute the factorial x! = x*(x-1)*...*2*1.\nRecall that 0! = 1\n\nConstraints:\n∙ 0 ≤ Input ≤ 6",
            "luaFile": "factorial.lua"
          }
        ]
      }
    ],
    [
      {
        "id": "65f6293f-c9db-47e0-9500-55a9ff712ee1",
        "name": "Triangle Numbers",
        "description": "Compute the nth triangle number.\nRecall that the triangle number function is defined by:\n\n  t(n) = 0 + 1 + 2 + ... + n\n\nConstraints:\n∙ 0 ≤ Input ≤ 44",
        "luaFile": "nth-triangle.lua"
      },
      {
        "id": "6c6021e6-7e4c-4617-9543-3d9aa98344f7",
        "name": "Nth Fibonacci",
        "description": "Compute the nth Fibonacci number.\nRecall that the Fibonacci function is defined by:\n\n  f(0) = 0\n  f(1) = 1\n  f(n) = f(n-1) + f(n-2)\n\n\nConstraints:\n∙ 0 ≤ Input ≤ 16",
        "luaFile": "nth-fibonacci.lua",
        "challengeLevels": [
          {
            "id": "b45d96eb-5488-49bd-825e-b6a53bcbc8b3",
            "name": "Nth Tribonacci",
            "description": "Compute the nth Tribonacci number.\nRecall that the Tribonacci function is defined by:\n\n  f(0) = 0\n  f(1) = 0\n  f(2) = 1\n  f(n) = f(n-1) + f(n-2) + f(n-3)\n\n\nConstraints:\n∙ 0 ≤ Input ≤ 12",
            "luaFile": "nth-tribonacci.lua"
          },
          {
            "id": "0fcc54db-8e05-4808-95da-0b2acc7a6480",
            "name": "Generic Fibonacci",
            "description": "Read k and n from input, then compute the nth k-Fibonacci number.\nRecall that the generic k-Fibonacci function is defined by:\n\n  f_k(0) ... f_k(k-2) = 0\n  f_k(k-1) = 1\n  f_k(n)   = f_k(n-1) + f_k(n-2) + ... + f_k(n-k)\n\n\nConstraints:\n∙ 2 ≤ k ≤ 9\n∙ 0 ≤ f_k(n) ≤ 999",
            "luaFile": "generic-fibonacci.lua"
          }
        ]
      },
      {
        "id": "89b647a5-f0d7-4694-b942-d394474dcb76",
        "name": "Palindrome Numbers",
        "description": "Output only the palindrome numbers (number is the same written forwards and backwards).\nSingle-digit numbers are considered palindromes.\n\nExamples:\n∙ Palindromes:     101, 333, 99, 6, 262\n∙ Non-Palindromes: 321, 56, 234, 98, 23\n\nConstraints:\n∙ 0 ≤ Input ≤ 999",
        "luaFile": "palindrome.lua"
      },
      {
        "id": "05b4a5b6-0479-42c8-be35-e10da3671c56",
        "name": "Prime Factorization",
        "description": "Read a number and output it's prime factorization. For example:\n∙ Input: 840\n∙ Output: 2 2 2 3 5 7     (840 = 2^3 * 3 * 5 * 7)\n\nConstraints:\n∙ 2 ≤ Input ≤ 999",
        "luaFile": "prime-factorization.lua"
      }
    ],
    [
      {
        "id": "69e11ea2-ebcf-455f-aa0b-4b54481024b0",
        "name": "Interpreter",
        "description": "Write an interpreter for a subset of the stack instructions:\n∙ 1 <Value> - Push <Value> onto the stack\n∙ 2 - Pop\n∙ 3 - Swap the top two values of the stack\n∙ 4 - Add, pop off two values from the stack and push their sum\n∙ 5 - Sub, pop off two values from the stack push their difference\n∙ 6 - Output, pop a value off the stack and push to the output stream\n\nExample:\n∙ Input: 1 10 1 20 4 1 99 3 2 6       Output: 99\n∙ Steps: PUSH 10, PUSH 20, ADD, PUSH 99, SWAP, POP, OUTPUT\n\nConstraints:\n∙ All instructions are valid\n∙ -99 ≤ Input ≤ 99\n∙ Program will not cause a stack or arithmetic error",
        "luaFile": "interpreter.lua"
      },
      {
        "id": "bcae893b-dcc2-4a50-83c1-20836ee190ed",
        "name": "Collatz Conjecture",
        "description": "Read a value from input. While the value is not equal to 1:\n∙ If the value is even, divide by 2\n∙ If the value is odd, multiply by 3 and add 1\n\nCount the number of steps it takes before the value reaches 1.\n\n\nExample:\n∙ Input: 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1\n∙ Output: 9 Steps",
        "luaFile": "collatz.lua"
      },
      {
        "id": "0c111214-c16a-4bdc-a524-77381acf9cd2",
        "name": "Memory Unit",
        "description": "For this puzzle, you need to simulate a memory unit with 5 slots (numbered 0-4).\nRead the first input to set the initial value for all memory slots.\nThen execute commands in sequence:\n∙ -1 <Addr> <Value> - Write <Value> to memory slot at <Addr>\n∙  1 <Addr>         - Read memory slot at <Addr> and copy to the output stream\n\nExample:\n∙ Input: -123 -1 2 12 1 1 1 2     Output: -123 12\n∙ Initial = -123, WRITE Mem[2] = 12, READ Mem[1], READ Mem[2]\n\nConstraints:\n∙ Command = 1 (READ) or -1 (WRITE)\n∙ -999 ≤ Initial, <Value> ≤ 999\n∙ 0 ≤ <Addr> ≤ 4",
        "luaFile": "memory-unit.lua"
      },
      {
        "id": "701dab92-5e07-4d22-a12c-2eb3e6f0339e",
        "name": "Linked List",
        "description": "Find the loop in the linked list. The data is structured as follows:\n1. Random starting index in the list\n2. Ten memory cells numbered 1 to 10\n   ∙ Each cell contains an index (1-10) of the next memory cell in the list\n\nBegin at the random start and follow the linked list until you revisit a cell.\nOutput the path you took through the list.\n\nConstraints:\n∙ Linked list always contains 10 memory cells\n∙ 1 ≤ Random Start, Memory Cell ≤ 10\n∙ Loop is guaranteed to terminate",
        "luaFile": "linked-list.lua"
      }
    ],
    [
      {
        "id": "3cabea8f-c4ce-4c8e-acbe-79e6717a5a34",
        "name": "Sorting",
        "description": "Read the list of input values and output them in sorted order.\nValues should be sorted from smallest to largest.\n\n\nConstraints:\n∙ -99 ≤ Input ≤ 99\n∙ 6 ≤ Number of Values ≤ 10",
        "luaFile": "sort.lua"
      },
      {
        "id": "8ab5300e-3378-4a0d-b890-b03160c882d3",
        "name": "Exponentiation",
        "description": "Read x and y from the input, then compute x^y.\nRecall that x^0 = 1 for any x (except 0^0, which is undefined).\n\n\nConstraints:\n∙ 0 ≤ x,y ≤ 9\n∙ x^y will not overflow\n∙ Will not ask for 0^0",
        "luaFile": "exponent.lua"
      },
      {
        "id": "56b6be1a-1063-4ae5-90dc-fe3e5d12f6e5",
        "name": "Longest Subsequence",
        "description": "Find the longest subsequence (or run) of equal values.\nThe subsequence is guaranteed to be unique.\nOutput the repeated number and length of the subsequence.\n\nExample:\n∙ Input: 13 13 2 99 99 99 99 60 60\n∙ Output: 99 4\n\n\nConstraints:\n∙ 1 ≤ Input ≤ 99\n∙ -99 ≤ Input ≤ 99\n∙ Subsequence will be unique",
        "luaFile": "longest-subsequence.lua"
      },
      {
        "id": "11f50659-b719-409a-990b-4704d6edc3a1",
        "name": "FPGA",
        "description": "Write a program to simulate a Field Programmable Gate Arrays (FPGA).\nRead an opcode from the input stream followed by two operands (a and b).\nThen perform the binary calculation and output the result.\nReference the following truth table for the opcodes and expected outputs:\n(Note that a NOT operation only has one operand a, so only read in one value)\n\n┌───────╥────┬────┬────┬────┬────┬────┬────┐\n│Opcode ║ 0  │ 1  │ 2  │ 3  │ -1 │ -2 │ -3 │\n╞═══╤═══╬════╪════╪════╪════╪════╪════╪════╡\n│ A │ B ║NOT │AND │ OR │XOR │NOR │NAND│XNOR│\n├───┼───╫────┼────┼────┼────┼────┼────┼────┤\n│ 1 │ 1 ║ -  │ 1  │ 1  │ 0  │ 0  │ 0  │ 1  │\n│ 1 │ 0 ║ 0  │ 0  │ 1  │ 1  │ 0  │ 1  │ 0  │\n│ 0 │ 1 ║ 1  │ 0  │ 1  │ 1  │ 0  │ 1  │ 0  │\n│ 0 │ 0 ║ -  │ 0  │ 0  │ 0  │ 1  │ 1  │ 1  │\n└───┴───╨────┴────┴────┴────┴────┴────┴────┘",
        "luaFile": "fpga.lua"
      },
      {
        "id": "0d398ad2-7a36-4e27-9e0d-df08bc7b9d98",
        "name": "Quadratic Formula",
        "description": "Output all integer solutions to the quadratic equation from smallest to largest.\nRecall from Algebra that if you have a quadratic equation:\n\n  a*x^2 + b*x + c\n\nThe solutions are given by:\n\n  x = [-b ± √(b^2 - 4ac)] / 2a\n\nCoefficients are passed in as: a, b, c\nOnly output duplicate solutions once.\n\nConstraints:\n∙ -99 ≤ Input ≤ 99\n∙ -9 ≤ Output Solution ≤ 9\n∙ Duplicate solutions should only be output once",
        "luaFile": "quadratic-formula.lua",
        "challengeLevels": [
          {
            "id": "751b3cde-465e-4321-bcb8-debd36808ed0",
            "name": "Cubic Formula",
            "description": "Output all integer solutions to the cubic equation from smallest to largest.\nCoefficients are passed in from x^3, x^2, x^1, x^0.\nOnly output duplicate solutions once.\n\nExample:\n  Input: 1 -6 -1 30     (x^3 - 6x^2 - x + 30)\n  Output: -2 3 5        (x + 2) * (x - 3) * (x - 5)\n\n\nConstraints:\n∙ -99 ≤ Input ≤ 99\n∙ -9 ≤ Output Solution ≤ 9\n∙ Duplicate solutions should only be output once",
            "luaFile": "cubic-formula.lua"
          },
          {
            "id": "6185615f-185a-46a6-848f-df7a682d8f1e",
            "name": "Polynomial",
            "description": "Output all integer solutions to the polynomial equation from smallest to largest.\nCoefficients are passed in from x^n, x^(n-1), ... x^1, x^0.\nOnly output duplicate solutions once.\n\nExample:\n  Input: 1 1 -25 -37 60     (x^4 + x^3 - 25x^2 - 37x + 60)\n  Output: -4 -3 1 5         (x + 4) * (x + 3) * (x - 1) * (x - 5)\n\n\nConstraints:\n∙ -99 ≤ Input ≤ 99\n∙ -9 ≤ Output Solution ≤ 9\n∙ Duplicate solutions should only be output once",
            "luaFile": "polynomial.lua"
          }
        ]
      }
    ]
  ]
}
