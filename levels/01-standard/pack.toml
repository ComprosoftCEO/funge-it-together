packName = "Standard Levels"

# -----------------
# | Level Group 1 |
# -----------------
[[levelGroups]]
[[levelGroups.levels]]
id = "b42f7f23-62aa-4b90-91b4-22cb5745211d"
name = "Add 7"
type = "standard"
luaFile = "add-7.lua"
description = """
Add 7 to every input


Constraints:
∙ -999 ≤ Input ≤ 992
"""

[[levelGroups.levels]]
id = "bccd3d32-821c-4f6e-97f7-12616e25ac7a"
name = "Sign"
type = "standard"
luaFile = "sign.lua"
description = """
Output the sign of the input:
∙ +1 if positive
∙ -1 if negative
∙  0 otherwise


Constraints:
∙ -999 ≤ Input ≤ 999
"""

# Challenge Levels {{{
  [[levelGroups.levels.challengeLevels]]
  id = "a7799c55-c6fc-4b4e-9839-427d92e8f7fe"
  name = "Absolute Value"
  type = "standard"
  luaFile = "absolute-value.lua"
  description = """
Output the absolute value of the input


Constraints:
∙ -999 ≤ Input ≤ 999
"""
# }}}

[[levelGroups.levels]]
id = "feb57646-7d5a-4564-930f-3040186b5897"
name = "Reverse"
type = "standard"
luaFile = "reverse.lua"
description = """
Reverse the order of the input items


Constraints:
∙ -999 ≤ Input ≤ 999"""

[[levelGroups.levels]]
id = "5214032e-87f1-415e-a086-15f4052d9fd4"
name = "Take 10"
type = "standard"
luaFile = "take-10.lua"
description = """
Take (at most) the first 10 input items.
The input may have fewer than 10 items.


Constraints:
∙ -999 ≤ Input ≤ 999
∙ 5 ≤ Number of Inputs ≤ 15
"""


# -----------------
# | Level Group 2 |
# -----------------
[[levelGroups]]
[[levelGroups.levels]]
id = "08a396a9-fc41-4146-9e3a-7d19d968b720"
name = "Divide By 5"
type = "standard"
luaFile = "divide-by-5.lua"
description = """
Divide the input by 5, rounded down.
For example, 23 / 5 = 4.


Constraints:
∙ 5 ≤ Input ≤ 100
"""

[[levelGroups.levels]]
id = "32467c02-63e4-42cc-8bd0-e214fc6dd7b5"
name = "Trim 0's"
type = "standard"
luaFile = "trim.lua"
description = """
Remove all 0's from the start and end of the input.
Leave any 0's in the middle of the input (sandwiched between non-zero numbers).

Constraints:
∙ -9 ≤ Input ≤ 9
"""

[[levelGroups.levels]]
id = "d6c44eee-46f6-416b-8756-a2970d72659e"
name = "Only Evens"
type = "standard"
luaFile = "only-evens.lua"
description = """
Output only the even numbers


Constraints:
∙ -10 ≤ Input ≤ 10
"""

[[levelGroups.levels]]
id = "70beb32f-056c-4730-87a5-0d851d81d6d3"
name = "Maximum Value"
type = "standard"
luaFile = "maximum.lua"
description = """
Output the maximum value from the list.
The maximum is guaranteed to be unique.


Constraints:
∙ -99 ≤ Input ≤ 99
∙ Unique maximum
"""

[[levelGroups.levels]]
id = "8339054a-ed5f-4686-bff5-eec510f03bae"
name = "Matching Parentheses"
type = "standard"
luaFile = "parentheses.lua"
description = """
Read a sequence of open `(` (1) and closed `)` (-1) parentheses from the input.
Return 1 if the sequence contains valid matching parentheses, or 0 otherwise.

Every sequence should be wrapped in a pair of parentheses. For example:
∙ Valid:   (()(()))
∙ Invalid: ()(())()

Constraints:
∙ Input = 1 or Input = -1
"""


# -----------------
# | Level Group 3 |
# -----------------
[[levelGroups]]
[[levelGroups.levels]]
id = "e2d916ee-c8c9-4556-a442-0f940c722aa7"
name = "Caesar Cipher"
type = "standard"
luaFile = "caesar-cipher.lua"
description = """
Encryption is an important part of secure data transmission.

First, read the encryption key integer from input.
Then, read the message and shift every letter (1-26, or A-Z) by that many characters.
Be sure to wrap around letters outside the range 1-26.

Example:
∙ Encryption Key: -5
∙ Input 3 (C), Output 24 (X)


Constraints:
∙ -25 ≤ Encryption Key ≤ -1  (Shift backward)
∙ 1 ≤ Encryption Key ≤ 25    (Shift forward)
∙ 1 ≤ Test Input ≤ 26
"""

[[levelGroups.levels]]
id = "e22d4ee3-0932-4686-be8b-086656accadc"
name = "Total Ordering"
type = "standard"
luaFile = "total-ordering.lua"
description = """
Read x and y from the input, then compute min{x,y} followed by max{x,y}.
Be careful to avoid arithmetic overflow when comparing x and y.


Constraints:
∙ -999 ≤ x,y ≤ 999
"""

[[levelGroups.levels]]
id = "67ac551c-3c7a-4f5f-b893-9d265aa89a43"
name = "Average"
type = "standard"
luaFile = "average.lua"
description = """
Compute the average of the input values, rounded down.

Example:
∙ average{3, 45, 19, 80} = 36


Constraints:
∙ 1 ≤ Input ≤ 99
∙ 2 ≤ Number of Input Values ≤ 10
"""

[[levelGroups.levels]]
id = "d3b36c5d-cefd-4eeb-91fa-ab59d041019c"
name = "Multiplication"
type = "standard"
luaFile = "multiplication.lua"
description = """
Read x and y from the input, then compute x*y.


Constraints:
∙ -99 ≤ x ≤ 99
∙ -10 ≤ y ≤ 10
"""

# Challenge Levels {{{
  [[levelGroups.levels.challengeLevels]]
  id = "8dc0aba7-1a18-4eb8-a3f2-7e301212130c"
  name = "Complex Product"
  type = "standard"
  luaFile = "complex-product.lua"
  description = """
Read the list of complex numbers from the input, then compute their product.
Recall that a complex number is given by z = a + b*i where i*i = -1.

Example: (4 + 3i) * (-7 + 9i) * (3 - 6i) = (-75 + 375i)
∙ Input:  4 3 -7 9 3 -6
∙ Output: -75 375


Constraints:
∙ -9 ≤ a,b ≤ 9
∙ Result can be computed without overflow
"""
# }}}


# -----------------
# | Level Group 4 |
# -----------------
[[levelGroups]]
[[levelGroups.levels]]
id = "a5130269-de46-4e79-a34a-a085da8ceb0b"
name = "Rising and Falling Edge"
type = "standard"
luaFile = "count-flips.lua"
description = """
Count the number of times the input switches from positive to negative or vice versa.
Reading the first input value does NOT count as a switch.
The input will never be 0.

Constraints:
∙ -999 ≤ Input ≤ 999
∙ Input ≠ 0
"""

[[levelGroups.levels]]
id = "cb69dbfe-b25c-40e2-9636-01136f30f1cb"
name = "Digital Root"
type = "standard"
luaFile = "digital-root.lua"
description = """
Add together all the digits of the input to get a new number.
Repeat until you have a number between 0 and 9.

Example:
∙ Input: 198
∙ Output: 9    (1 + 9 + 8 = 18 → 1 + 8 = 9)

Constraints:
∙ 0 ≤ Input ≤ 999
"""

[[levelGroups.levels]]
id = "d3093ed1-25c0-4a55-9bd0-62fbf07f2c0b"
name = "Binary Decoder"
type = "standard"
luaFile = "binary-decoder.lua"
description = """
Read the binary number from the input bits and convert to a base-10 number.
The bits are specified in big-endian order. There may be leading zeros.

Constraints:
∙ 0 ≤ Num Input Bits ≤ 10
∙ Input may have leading zeros
∙ 0 ≤ Output ≤ 999
"""

# Challenge Levels {{{
  [[levelGroups.levels.challengeLevels]]
  id = "024c0950-084c-4804-9c4c-90293be2d210"
  name = "Binary Encoder"
  type = "standard"
  luaFile = "binary-encoder.lua"
  description = """
Read a base-10 number and output its big-endian binary representation.
The output should NOT have any leading zeros.

Constraints:
∙ 0 ≤ Input ≤ 999
∙ Output should not have any leading zeros
"""
# }}}

[[levelGroups.levels]]
id = "49c6aadf-cf77-46d0-9ba2-48f71cbdb0de"
name = "Manhattan Distance"
type = "standard"
luaFile = "manhattan-distance.lua"
description = """
A taxi driver visits various grid coordinates while driving in New York City.
Assume the car only moves vertically and horizontally, never diagonally.
Find out the total distance traveled.

Read a series of (x,y) coordinates from the input and output the total distance.

Constraints:
∙ 0 ≤ x,y ≤ 99
∙ The taxi visits 1 to 7 (x,y) coordinates
∙ Total distance traveled ≤ 999
"""

[[levelGroups.levels]]
id = "f26f174b-86eb-4c4f-9d06-af635b4f62e9"
name = "Grandma Texting"
type = "standard"
luaFile = "grandma-texting.lua"
description = """
Your grandma bought a "new" phone from Goodwill, but is having trouble texting.
It appears the phone uses a non-standard keyboard layout for the letters.
Write a program to help your grandma out.
                                                                 ┌───┬───┬───┐
Read a letter A-Z (1 to 26) from the input.                      │ 1 │ 2 │ 3 │
Then, output the keys to type the letter on Grandma's new phone. │ABC│DEF│GHI│
                                                                 ├───┼───┼───┤
For example:                                                     │ 4 │ 5 │ 6 │
∙ Input:  14 (N)                                                 │JKL│MNO│PQR│
∙ Output: 55                                                     ├───┼───┼───┤
                                                                 │ 7 │ 8 │ 9 │
Constraints:                                                     │STU│VWX│YZ │
∙ 1 ≤ Input ≤ 26                                                 └───┼───┼───┘
                                                                     │ 0 │
                                                                     └───┘
"""


# -----------------
# | Level Group 5 |
# -----------------
[[levelGroups]]
[[levelGroups.levels]]
id = "65f6293f-c9db-47e0-9500-55a9ff712ee1"
name = "Triangle Numbers"
type = "standard"
luaFile = "nth-triangle.lua"
description = """
Compute the nth triangle number.
Recall that the triangle number function is defined by:

  t(n) = 0 + 1 + 2 + ... + n

Constraints:
∙ 0 ≤ Input ≤ 44
"""

# Challenge Levels {{{
  [[levelGroups.levels.challengeLevels]]
  id = "79017cfa-a8e1-4ef9-9fab-67146746a317"
  name = "Factorial"
  type = "standard"
  luaFile = "factorial.lua"
  description = """
Read x from the input and compute the factorial x! = x*(x-1)*...*2*1.
Recall that 0! = 1

Constraints:
∙ 0 ≤ Input ≤ 6
"""
# }}}

[[levelGroups.levels]]
id = "6c6021e6-7e4c-4617-9543-3d9aa98344f7"
name = "Nth Fibonacci"
type = "standard"
luaFile = "nth-fibonacci.lua"
description = """
Compute the nth Fibonacci number.
Recall that the Fibonacci function is defined by:

  f(0) = 0
  f(1) = 1
  f(n) = f(n-1) + f(n-2)


Constraints:
∙ 0 ≤ Input ≤ 16
"""

# Challenge Levels {{{
  [[levelGroups.levels.challengeLevels]]
  id = "b45d96eb-5488-49bd-825e-b6a53bcbc8b3"
  name = "Nth Tribonacci"
  type = "standard"
  luaFile = "nth-tribonacci.lua"
  description = """
Compute the nth Tribonacci number.
Recall that the Tribonacci function is defined by:

  f(0) = 0
  f(1) = 0
  f(2) = 1
  f(n) = f(n-1) + f(n-2) + f(n-3)


Constraints:
∙ 0 ≤ Input ≤ 12
"""

  [[levelGroups.levels.challengeLevels]]
  id = "0fcc54db-8e05-4808-95da-0b2acc7a6480"
  name = "Generic Fibonacci"
  type = "standard"
  luaFile = "generic-fibonacci.lua"
  description = """
Read k and n from input, then compute the nth k-Fibonacci number.
Recall that the generic k-Fibonacci function is defined by:

  f_k(0) ... f_k(k-2) = 0
  f_k(k-1) = 1
  f_k(n)   = f_k(n-1) + f_k(n-2) + ... + f_k(n-k)


Constraints:
∙ 2 ≤ k ≤ 9
∙ 0 ≤ f_k(n) ≤ 999
"""
# }}}

[[levelGroups.levels]]
id = "89b647a5-f0d7-4694-b942-d394474dcb76"
name = "Palindrome Numbers"
type = "standard"
luaFile = "palindrome.lua"
description = """
Output only the palindrome numbers (number is the same written forwards and backwards).
Single-digit numbers are considered palindromes.

Examples:
∙ Palindromes:     101, 333, 99, 6, 262
∙ Non-Palindromes: 321, 56, 234, 98, 23

Constraints:
∙ 0 ≤ Input ≤ 999
"""

[[levelGroups.levels]]
id = "1b6cc3d5-4e94-4b3f-82e1-82d4a96f8e6d"
name = "Remove Substring"
type = "standard"
luaFile = "remove-substring.lua"
description = """
Read numbers from input and remove any sub-sequence of numbers 1 2 3.
Write the remaining numbers to the output in the same order.

Constraints:
∙ 0 ≤ Input ≤ 9
"""


# -----------------
# | Level Group 6 |
# -----------------
[[levelGroups]]
[[levelGroups.levels]]
id = "05b4a5b6-0479-42c8-be35-e10da3671c56"
name = "Prime Factorization"
type = "standard"
luaFile = "prime-factorization.lua"
description = """
Read a number and output it's prime factorization. For example:
∙ Input: 840
∙ Output: 2 2 2 3 5 7     (840 = 2^3 * 3 * 5 * 7)

Constraints:
∙ 2 ≤ Input ≤ 999
"""

[[levelGroups.levels]]
id = "69e11ea2-ebcf-455f-aa0b-4b54481024b0"
name = "Interpreter"
type = "standard"
luaFile = "interpreter.lua"
description = """
Write an interpreter for a subset of the stack instructions:
∙ 1 <Value> - Push <Value> onto the stack
∙ 2 - Pop
∙ 3 - Swap the top two values of the stack
∙ 4 - Add, pop off two values from the stack and push their sum
∙ 5 - Sub, pop off two values from the stack push their difference
∙ 6 - Output, pop a value off the stack and push to the output stream

Example:
∙ Input: 1 10 1 20 4 1 99 3 2 6       Output: 99
∙ Steps: PUSH 10, PUSH 20, ADD, PUSH 99, SWAP, POP, OUTPUT

Constraints:
∙ All instructions are valid
∙ -99 ≤ Input ≤ 99
∙ Program will not cause a stack or arithmetic error
"""

[[levelGroups.levels]]
id = "bcae893b-dcc2-4a50-83c1-20836ee190ed"
name = "Collatz Conjecture"
type = "standard"
luaFile = "collatz.lua"
description = """
Read a value from input. While the value is not equal to 1:
∙ If the value is even, divide by 2
∙ If the value is odd, multiply by 3 and add 1

Count the number of steps it takes before the value reaches 1.


Example:
∙ Input: 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
∙ Output: 9 Steps
"""

[[levelGroups.levels]]
id = "76521aeb-bfd7-4502-962b-e9bbd18d9072"
name = "Square Root"
type = "standard"
luaFile = "square-root.lua"
description = """
Read x from the input, then compute √x rounded down.

Constraints:
∙ 0 ≤ x ≤ 999
"""


# -----------------
# | Level Group 7 |
# -----------------
[[levelGroups]]
[[levelGroups.levels]]
id = "0c111214-c16a-4bdc-a524-77381acf9cd2"
name = "Memory Unit"
type = "standard"
luaFile = "memory-unit.lua"
description = """
For this puzzle, you need to simulate a memory unit with 5 slots (numbered 0-4).
Read the first input to set the initial value for all memory slots.
Then execute commands in sequence:
∙ -1 <Addr> <Value> - Write <Value> to memory slot at <Addr>
∙  1 <Addr>         - Read memory slot at <Addr> and copy to the output stream

Example:
∙ Input: -123 -1 2 12 1 1 1 2     Output: -123 12
∙ Initial = -123, WRITE Mem[2] = 12, READ Mem[1], READ Mem[2]

Constraints:
∙ Command = 1 (READ) or -1 (WRITE)
∙ -999 ≤ Initial, <Value> ≤ 999
∙ 0 ≤ <Addr> ≤ 4
"""

# Challenge Levels {{{
  [[levelGroups.levels.challengeLevels]]
  id = "701dab92-5e07-4d22-a12c-2eb3e6f0339e"
  name = "Linked List"
  type = "standard"
  luaFile = "linked-list.lua"
  description = """
Find the loop in the linked list. The data is structured as follows:
1. Random starting index in the list
2. Ten memory cells numbered 0 to 9
   ∙ Each cell contains an index (0-9) of the next memory cell in the list

Begin at the random start and follow the linked list until you revisit a cell.
Output the path you took through the list.

Constraints:
∙ Linked list always contains 10 memory cells
∙ 0 ≤ Random Start, Memory Cell ≤ 9
∙ Loop is guaranteed to terminate
"""
# }}}

[[levelGroups.levels]]
id = "ef9c067c-24fd-4c90-88e4-073fdbbbbe61"
name = "Random Number Generator"
type = "standard"
luaFile = "prng.lua"
description = """
Generate pseudo-random numbers using a linear congruential generator (LCG).
The random sequence is defined as:

  r(n) = a * r(n-1) + b (mod 1000)

Read a, b, and r(0) (the seed) from the input, and output r(1) to r(15).

Constraints:
∙ 2 ≤ a ≤ 999
∙ 0 ≤ b ≤ 999
∙ 0 ≤ Seed ≤ 999
"""

[[levelGroups.levels]]
id = "3da6926e-9450-4a36-986e-6a8b2c90f644"
name = "Big Integer"
type = "standard"
luaFile = "bigint.lua"
description = """
Big integers are a little-endian list of numbers from 0 to 999 that can represent values ≥ 1000.
For example, the number 123,456 can be represented by the list: 456 123.

Read two big integers from input and output their sum.
The two little-endian numbers are separated by a -1.
Do not include any leading 0's in the sum.

Example: 987,654 + 98,774 = 1,086,428
∙ Input:  654 987 -1 774 98
∙ Output: 428 86 1

Constraints:
∙ 0 ≤ Digit ≤ 999
∙ Each big integer will have 1 to 5 digits
"""


# -----------------
# | Level Group 8 |
# -----------------
[[levelGroups]]
[[levelGroups.levels]]
id = "3cabea8f-c4ce-4c8e-acbe-79e6717a5a34"
name = "Sorting"
type = "standard"
luaFile = "sort.lua"
description = """
Read the list of input values and output them in sorted order.
Values should be sorted from smallest to largest.


Constraints:
∙ -99 ≤ Input ≤ 99
∙ 6 ≤ Number of Values ≤ 10
"""

# Challenge Levels {{{
  [[levelGroups.levels.challengeLevels]]
  id = "49c4bc11-dd71-4f5c-a374-3fc1740168d1"
  name = "Unique Values"
  type = "standard"
  luaFile = "unique.lua"
  description = """
Read the list of input values and output only the unique values.
Output values should be sorted from smallest to largest.


Constraints:
∙ -99 ≤ Input ≤ 99
∙ 6 ≤ Number of Values ≤ 10
"""
# }}}

[[levelGroups.levels]]
id = "8ab5300e-3378-4a0d-b890-b03160c882d3"
name = "Exponentiation"
type = "standard"
luaFile = "exponent.lua"
description = """
Read x and y from the input, then compute x^y.
Recall that x^0 = 1 for any x (except 0^0, which is undefined).


Constraints:
∙ 0 ≤ x,y ≤ 9
∙ x^y will not overflow
∙ Will not ask for 0^0
"""

[[levelGroups.levels]]
id = "56b6be1a-1063-4ae5-90dc-fe3e5d12f6e5"
name = "Longest Subsequence"
type = "standard"
luaFile = "longest-subsequence.lua"
description = """
Find the longest subsequence (or run) of equal values.
The subsequence is guaranteed to be unique.
Output the repeated number and length of the subsequence.

Example:
∙ Input: 13 13 2 99 99 99 99 60 60
∙ Output: 99 4


Constraints:
∙ 1 ≤ Input ≤ 99
∙ -99 ≤ Input ≤ 99
∙ Subsequence will be unique
"""

[[levelGroups.levels]]
id = "11f50659-b719-409a-990b-4704d6edc3a1"
name = "FPGA"
type = "standard"
luaFile = "fpga.lua"
description = """
Write a program to simulate a Field Programmable Gate Arrays (FPGA).
Read an opcode from the input stream followed by two operands (a and b).
Then perform the binary calculation and output the result.
Reference the following truth table for the opcodes and expected outputs:
(Note that a NOT operation only has one operand a, so only read in one value)

┌───────╥────┬────┬────┬────┬────┬────┬────┐
│Opcode ║ 0  │ 1  │ 2  │ 3  │ -1 │ -2 │ -3 │
╞═══╤═══╬════╪════╪════╪════╪════╪════╪════╡
│ A │ B ║NOT │AND │ OR │XOR │NOR │NAND│XNOR│
├───┼───╫────┼────┼────┼────┼────┼────┼────┤
│ 1 │ 1 ║ -  │ 1  │ 1  │ 0  │ 0  │ 0  │ 1  │
│ 1 │ 0 ║ 0  │ 0  │ 1  │ 1  │ 0  │ 1  │ 0  │
│ 0 │ 1 ║ 1  │ 0  │ 1  │ 1  │ 0  │ 1  │ 0  │
│ 0 │ 0 ║ -  │ 0  │ 0  │ 0  │ 1  │ 1  │ 1  │
└───┴───╨────┴────┴────┴────┴────┴────┴────┘
"""

[[levelGroups.levels]]
id = "0d398ad2-7a36-4e27-9e0d-df08bc7b9d98"
name = "Quadratic Formula"
type = "standard"
luaFile = "quadratic-formula.lua"
description = """
Output all integer solutions to the quadratic equation from smallest to largest.
Recall from Algebra that if you have a quadratic equation:

  a*x^2 + b*x + c

The solutions are given by:

  x = [-b ± √(b^2 - 4ac)] / 2a

Coefficients are passed in as: a, b, c. Only output duplicate solutions once.

Constraints:
∙ -99 ≤ Input ≤ 99
∙ -9 ≤ Output Solution ≤ 9
∙ Duplicate solutions should only be output once
∙ Quadratic can be computed without overflow
"""

# Challenge Levels {{{
  [[levelGroups.levels.challengeLevels]]
  id = "751b3cde-465e-4321-bcb8-debd36808ed0"
  name = "Cubic Formula"
  type = "standard"
  luaFile = "cubic-formula.lua"
  description = """
Output all integer solutions to the cubic equation from smallest to largest.
Coefficients are passed in from x^3, x^2, x^1, x^0.
Only output duplicate solutions once.

Example:
  Input: 1 -6 -1 30     (x^3 - 6x^2 - x + 30)
  Output: -2 3 5        (x + 2) * (x - 3) * (x - 5)


Constraints:
∙ -999 ≤ Input ≤ 999
∙ -9 ≤ Output Solution ≤ 9
∙ Duplicate solutions should only be output once
∙ Cubic can be computed without overflow
"""

  [[levelGroups.levels.challengeLevels]]
  id = "6185615f-185a-46a6-848f-df7a682d8f1e"
  name = "Polynomial"
  type = "standard"
  luaFile = "polynomial.lua"
  description = """
Output all integer solutions to the polynomial equation from smallest to largest.
Coefficients are passed in from x^n, x^(n-1), ... x^1, x^0.
Only output duplicate solutions once.

Example:
∙ Input: 1 6 9 -4 -12     (x^4 + 6x^3 + 9x^2 - 4x - 12)
∙ Output: -3 -2 1         (x + 3) * (x + 2)^2 * (x - 1)

Constraints:
∙ -999 ≤ Input ≤ 999
∙ ┌───Degree───╥─x^2 ─┬─x^3 ─┬─x^4 ─┬─x^5 ─┐
  ├────────────╫──────┼──────┼──────┼──────┤
  │Output Range║[-9,9]│[-7,7]│[-5,5]│[-3,3]│
  └────────────╨──────┴──────┴──────┴──────┘
∙ Duplicate solutions should only be output once
∙ Polynomial can be computed without overflow
"""
# }}}