-- Collatz numbers that don't overflow when computing
--  Pre-computed using JavaScript code
local ALLOWED = {
  2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28,
  29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 56, 57, 58,
  59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89,
  90, 92, 93, 96, 98, 99, 100, 101, 102, 104, 105, 106, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 128, 130,
  131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 144, 148, 149, 150, 152, 153, 154, 156, 157, 158, 160, 162, 163, 168,
  170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 192, 196, 197, 198, 200, 202, 203, 204, 205, 208,
  209, 210, 211, 212, 213, 217, 224, 226, 228, 229, 230, 232, 234, 236, 237, 238, 240, 241, 244, 245, 246, 249, 256, 260,
  261, 262, 264, 266, 268, 269, 270, 272, 273, 276, 277, 278, 280, 281, 282, 288, 289, 296, 298, 300, 301, 304, 305, 306,
  308, 309, 312, 314, 316, 317, 320, 321, 324, 325, 326, 336, 340, 344, 346, 348, 352, 354, 356, 358, 360, 362, 368, 370,
  372, 374, 384, 392, 394, 396, 400, 404, 406, 408, 410, 416, 418, 420, 422, 424, 426, 434, 448, 452, 456, 458, 460, 464,
  468, 472, 474, 476, 480, 482, 488, 490, 492, 498, 512, 520, 522, 524, 528, 532, 536, 538, 540, 544, 546, 552, 554, 556,
  560, 562, 564, 576, 578, 592, 596, 600, 602, 608, 610, 612, 616, 618, 624, 628, 632, 634, 640, 642, 648, 650, 652, 672,
  680, 688, 692, 696, 704, 708, 712, 716, 720, 724, 736, 740, 744, 748, 768, 784, 788, 792, 800, 808, 812, 816, 820, 832,
  836, 840, 844, 848, 852, 868, 896, 904, 912, 916, 920, 928, 936, 944, 948, 952, 960, 964, 976, 980, 984, 996,
}

function generateTestCase()
  local inputs, outputs = {}, {}

  for i = 1, 15 do
    inputs[i] = ALLOWED[math.random(1, #ALLOWED)]
    outputs[i] = computeSteps(inputs[i], 0)
  end

  return inputs, outputs
end

function computeSteps(x, acc)
  if x > 999 then
    error("X is too large: " .. x)
  end

  if x == 1 then
    return acc
  elseif (x % 2 == 0) then
    return computeSteps(x / 2, acc + 1)
  else
    return computeSteps(x * 3 + 1, acc + 1)
  end
end
